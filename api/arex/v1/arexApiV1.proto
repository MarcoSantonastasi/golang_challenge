syntax = "proto3";

package v1;

option go_package = "github.com/marcosantonastasi/arex_challenge/proto";

message Empty {}

message Investor {
    string id = 1;
    string name = 2;
    int64  balance = 3;
}

message Issuer {
    string id = 1;
    string name = 2;
    int64  balance = 3;
}

message Invoice {
    string id = 1;
    string issuerAccountId = 2;
    string reference = 3;
    string denom = 4;
    int64 amount = 5;
    int64 asking = 6;
    string state = 7;
}

message Bid {
    int64 id = 1;
    string invoiceId = 2;
    string bidderAccountId = 3;
    int64 offer = 4;
    string state = 5;
}

message BidWithInvoice {
	int64 id = 1;
	string invoiceId = 2 ;
	string bidderAccountId = 3;
	int64 offer = 4;
	string state = 5;
	string InvoiceIssuerAccountId = 6;
	string InvoiceReference = 7;
	string InvoiceDenom = 8;
	int64 InvoiceAmount =9;
	int64 InvoiceAsking = 10;
	string InvoiceState = 11;
}

message GetAllInvestorsResponse{
    repeated Investor data = 1;
}

service InvestorService {
    rpc GetAllInvestors(Empty) returns (GetAllInvestorsResponse);
}


message GetAllIssuersResponse{
    repeated Issuer data = 1;
}

service IssuerService {
    rpc GetAllIssuers(Empty) returns (GetAllIssuersResponse);
}

message GetAllBidsResponse{
    repeated Bid data = 1;
}

message GetBidByIdRequest {
    int64 bidId =1;
}

message GetBidByIdResponse{
    Bid data = 1;
}

message GetBidWithInvoiceByIdRequest {
    int64 bidId =1;
}

message GetBidWithInvoiceByIdResponse{
    BidWithInvoice data = 1;
}

message GetBidsByInvoiceIdRequest {
    string InvoiceId = 1;
}

message GetBidsByInvoiceIdResponse {
    repeated Bid data = 1;
}

message GetBidsByInvestorIdRequest {
    string InvestorId = 1;
}

message GetBidsByInvestorIdResponse {
    repeated BidWithInvoice data = 1;
}

message NewBidRequest{
    string invoiceId = 1;
    string bidderAccountId = 2;
    int64 offer = 3;
}

message NewBidResponse{
    Bid data = 1;
}

message GetFulfillingBidsRequest{
    string InvoiceId = 1;
}

message GetFulfillingBidsResponse {
    repeated Bid data = 1;
}

message AdjudicateBidRequest {
    int64 bidId =1;
}

message AdjudicateBidResponse{
    int64 amount =1;
}

message AllRunningBidsToLostRequest {
    string InvoiceId = 1;
}

message AllRunningBidsToLostResponse {
    repeated Bid data = 1;
}

service BidService {
    rpc GetAllBids(Empty) returns (GetAllBidsResponse);
    rpc GetBidById(GetBidByIdRequest) returns (GetBidByIdResponse);
    rpc GetBidWithInvoiceById(GetBidWithInvoiceByIdRequest) returns (GetBidWithInvoiceByIdResponse);
    rpc GetBidsByInvoiceId(GetBidsByInvoiceIdRequest) returns (GetBidsByInvoiceIdResponse);
    rpc GetBidsByInvestorId(GetBidsByInvestorIdRequest) returns (GetBidsByInvestorIdResponse);
    rpc NewBid(NewBidRequest) returns (NewBidResponse);
    rpc GetFulfillingBids(GetFulfillingBidsRequest) returns (GetFulfillingBidsResponse);
    rpc AdjudicateBid(AdjudicateBidRequest) returns (AdjudicateBidResponse);
    rpc AllRunningBidsToLost(AllRunningBidsToLostRequest) returns (AllRunningBidsToLostResponse);
}


message GetAllInvoicesResponse{
    repeated Invoice data = 1;
}

message GetInvoiceByIdRequest{
    string invoiceId =1;
}

message GetInvoiceByIdResponse{
    Invoice data =1;
}

message NewInvoiceRequest{
    string issuerAccountId = 1;
    string reference = 2;
    string denom = 3;
    int64 amount = 4;
    int64 asking = 5;
}

message NewInvoiceResponse{
    Invoice data = 1;
}

service InvoiceService {
    rpc GetAllInvoices(Empty) returns (GetAllInvoicesResponse);
    rpc GetInvoiceById(GetInvoiceByIdRequest) returns (GetInvoiceByIdResponse);
    rpc NewInvoice(NewInvoiceRequest) returns (NewInvoiceResponse);
}
