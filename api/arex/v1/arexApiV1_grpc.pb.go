// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/arex/v1/arexApiV1.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InvestorServiceClient is the client API for InvestorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvestorServiceClient interface {
	GetAllInvestors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllInvestorsResponse, error)
}

type investorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvestorServiceClient(cc grpc.ClientConnInterface) InvestorServiceClient {
	return &investorServiceClient{cc}
}

func (c *investorServiceClient) GetAllInvestors(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllInvestorsResponse, error) {
	out := new(GetAllInvestorsResponse)
	err := c.cc.Invoke(ctx, "/v1.InvestorService/GetAllInvestors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvestorServiceServer is the server API for InvestorService service.
// All implementations must embed UnimplementedInvestorServiceServer
// for forward compatibility
type InvestorServiceServer interface {
	GetAllInvestors(context.Context, *Empty) (*GetAllInvestorsResponse, error)
	mustEmbedUnimplementedInvestorServiceServer()
}

// UnimplementedInvestorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvestorServiceServer struct {
}

func (UnimplementedInvestorServiceServer) GetAllInvestors(context.Context, *Empty) (*GetAllInvestorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInvestors not implemented")
}
func (UnimplementedInvestorServiceServer) mustEmbedUnimplementedInvestorServiceServer() {}

// UnsafeInvestorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvestorServiceServer will
// result in compilation errors.
type UnsafeInvestorServiceServer interface {
	mustEmbedUnimplementedInvestorServiceServer()
}

func RegisterInvestorServiceServer(s grpc.ServiceRegistrar, srv InvestorServiceServer) {
	s.RegisterService(&InvestorService_ServiceDesc, srv)
}

func _InvestorService_GetAllInvestors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvestorServiceServer).GetAllInvestors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InvestorService/GetAllInvestors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvestorServiceServer).GetAllInvestors(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InvestorService_ServiceDesc is the grpc.ServiceDesc for InvestorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvestorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.InvestorService",
	HandlerType: (*InvestorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllInvestors",
			Handler:    _InvestorService_GetAllInvestors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/arex/v1/arexApiV1.proto",
}

// IssuerServiceClient is the client API for IssuerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssuerServiceClient interface {
	GetAllIssuers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllIssuersResponse, error)
}

type issuerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssuerServiceClient(cc grpc.ClientConnInterface) IssuerServiceClient {
	return &issuerServiceClient{cc}
}

func (c *issuerServiceClient) GetAllIssuers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllIssuersResponse, error) {
	out := new(GetAllIssuersResponse)
	err := c.cc.Invoke(ctx, "/v1.IssuerService/GetAllIssuers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssuerServiceServer is the server API for IssuerService service.
// All implementations must embed UnimplementedIssuerServiceServer
// for forward compatibility
type IssuerServiceServer interface {
	GetAllIssuers(context.Context, *Empty) (*GetAllIssuersResponse, error)
	mustEmbedUnimplementedIssuerServiceServer()
}

// UnimplementedIssuerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIssuerServiceServer struct {
}

func (UnimplementedIssuerServiceServer) GetAllIssuers(context.Context, *Empty) (*GetAllIssuersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllIssuers not implemented")
}
func (UnimplementedIssuerServiceServer) mustEmbedUnimplementedIssuerServiceServer() {}

// UnsafeIssuerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssuerServiceServer will
// result in compilation errors.
type UnsafeIssuerServiceServer interface {
	mustEmbedUnimplementedIssuerServiceServer()
}

func RegisterIssuerServiceServer(s grpc.ServiceRegistrar, srv IssuerServiceServer) {
	s.RegisterService(&IssuerService_ServiceDesc, srv)
}

func _IssuerService_GetAllIssuers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssuerServiceServer).GetAllIssuers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.IssuerService/GetAllIssuers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssuerServiceServer).GetAllIssuers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// IssuerService_ServiceDesc is the grpc.ServiceDesc for IssuerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssuerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.IssuerService",
	HandlerType: (*IssuerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllIssuers",
			Handler:    _IssuerService_GetAllIssuers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/arex/v1/arexApiV1.proto",
}

// BidServiceClient is the client API for BidService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidServiceClient interface {
	GetAllBids(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllBidsResponse, error)
	GetBidById(ctx context.Context, in *GetBidByIdRequest, opts ...grpc.CallOption) (*GetBidByIdResponse, error)
	GetBidWithInvoiceById(ctx context.Context, in *GetBidWithInvoiceByIdRequest, opts ...grpc.CallOption) (*GetBidWithInvoiceByIdResponse, error)
	GetBidsByInvoiceId(ctx context.Context, in *GetBidsByInvoiceIdRequest, opts ...grpc.CallOption) (*GetBidsByInvoiceIdResponse, error)
	GetBidsByInvestorId(ctx context.Context, in *GetBidsByInvestorIdRequest, opts ...grpc.CallOption) (*GetBidsByInvestorIdResponse, error)
	NewBid(ctx context.Context, in *NewBidRequest, opts ...grpc.CallOption) (*NewBidResponse, error)
	GetFulfillingBids(ctx context.Context, in *GetFulfillingBidsRequest, opts ...grpc.CallOption) (*GetFulfillingBidsResponse, error)
	AdjudicateBid(ctx context.Context, in *AdjudicateBidRequest, opts ...grpc.CallOption) (*AdjudicateBidResponse, error)
	AllRunningBidsToLost(ctx context.Context, in *AllRunningBidsToLostRequest, opts ...grpc.CallOption) (*AllRunningBidsToLostResponse, error)
}

type bidServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBidServiceClient(cc grpc.ClientConnInterface) BidServiceClient {
	return &bidServiceClient{cc}
}

func (c *bidServiceClient) GetAllBids(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllBidsResponse, error) {
	out := new(GetAllBidsResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/GetAllBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) GetBidById(ctx context.Context, in *GetBidByIdRequest, opts ...grpc.CallOption) (*GetBidByIdResponse, error) {
	out := new(GetBidByIdResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/GetBidById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) GetBidWithInvoiceById(ctx context.Context, in *GetBidWithInvoiceByIdRequest, opts ...grpc.CallOption) (*GetBidWithInvoiceByIdResponse, error) {
	out := new(GetBidWithInvoiceByIdResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/GetBidWithInvoiceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) GetBidsByInvoiceId(ctx context.Context, in *GetBidsByInvoiceIdRequest, opts ...grpc.CallOption) (*GetBidsByInvoiceIdResponse, error) {
	out := new(GetBidsByInvoiceIdResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/GetBidsByInvoiceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) GetBidsByInvestorId(ctx context.Context, in *GetBidsByInvestorIdRequest, opts ...grpc.CallOption) (*GetBidsByInvestorIdResponse, error) {
	out := new(GetBidsByInvestorIdResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/GetBidsByInvestorId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) NewBid(ctx context.Context, in *NewBidRequest, opts ...grpc.CallOption) (*NewBidResponse, error) {
	out := new(NewBidResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) GetFulfillingBids(ctx context.Context, in *GetFulfillingBidsRequest, opts ...grpc.CallOption) (*GetFulfillingBidsResponse, error) {
	out := new(GetFulfillingBidsResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/GetFulfillingBids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) AdjudicateBid(ctx context.Context, in *AdjudicateBidRequest, opts ...grpc.CallOption) (*AdjudicateBidResponse, error) {
	out := new(AdjudicateBidResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/AdjudicateBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bidServiceClient) AllRunningBidsToLost(ctx context.Context, in *AllRunningBidsToLostRequest, opts ...grpc.CallOption) (*AllRunningBidsToLostResponse, error) {
	out := new(AllRunningBidsToLostResponse)
	err := c.cc.Invoke(ctx, "/v1.BidService/AllRunningBidsToLost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BidServiceServer is the server API for BidService service.
// All implementations must embed UnimplementedBidServiceServer
// for forward compatibility
type BidServiceServer interface {
	GetAllBids(context.Context, *Empty) (*GetAllBidsResponse, error)
	GetBidById(context.Context, *GetBidByIdRequest) (*GetBidByIdResponse, error)
	GetBidWithInvoiceById(context.Context, *GetBidWithInvoiceByIdRequest) (*GetBidWithInvoiceByIdResponse, error)
	GetBidsByInvoiceId(context.Context, *GetBidsByInvoiceIdRequest) (*GetBidsByInvoiceIdResponse, error)
	GetBidsByInvestorId(context.Context, *GetBidsByInvestorIdRequest) (*GetBidsByInvestorIdResponse, error)
	NewBid(context.Context, *NewBidRequest) (*NewBidResponse, error)
	GetFulfillingBids(context.Context, *GetFulfillingBidsRequest) (*GetFulfillingBidsResponse, error)
	AdjudicateBid(context.Context, *AdjudicateBidRequest) (*AdjudicateBidResponse, error)
	AllRunningBidsToLost(context.Context, *AllRunningBidsToLostRequest) (*AllRunningBidsToLostResponse, error)
	mustEmbedUnimplementedBidServiceServer()
}

// UnimplementedBidServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBidServiceServer struct {
}

func (UnimplementedBidServiceServer) GetAllBids(context.Context, *Empty) (*GetAllBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBids not implemented")
}
func (UnimplementedBidServiceServer) GetBidById(context.Context, *GetBidByIdRequest) (*GetBidByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidById not implemented")
}
func (UnimplementedBidServiceServer) GetBidWithInvoiceById(context.Context, *GetBidWithInvoiceByIdRequest) (*GetBidWithInvoiceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidWithInvoiceById not implemented")
}
func (UnimplementedBidServiceServer) GetBidsByInvoiceId(context.Context, *GetBidsByInvoiceIdRequest) (*GetBidsByInvoiceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidsByInvoiceId not implemented")
}
func (UnimplementedBidServiceServer) GetBidsByInvestorId(context.Context, *GetBidsByInvestorIdRequest) (*GetBidsByInvestorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidsByInvestorId not implemented")
}
func (UnimplementedBidServiceServer) NewBid(context.Context, *NewBidRequest) (*NewBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (UnimplementedBidServiceServer) GetFulfillingBids(context.Context, *GetFulfillingBidsRequest) (*GetFulfillingBidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFulfillingBids not implemented")
}
func (UnimplementedBidServiceServer) AdjudicateBid(context.Context, *AdjudicateBidRequest) (*AdjudicateBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjudicateBid not implemented")
}
func (UnimplementedBidServiceServer) AllRunningBidsToLost(context.Context, *AllRunningBidsToLostRequest) (*AllRunningBidsToLostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllRunningBidsToLost not implemented")
}
func (UnimplementedBidServiceServer) mustEmbedUnimplementedBidServiceServer() {}

// UnsafeBidServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidServiceServer will
// result in compilation errors.
type UnsafeBidServiceServer interface {
	mustEmbedUnimplementedBidServiceServer()
}

func RegisterBidServiceServer(s grpc.ServiceRegistrar, srv BidServiceServer) {
	s.RegisterService(&BidService_ServiceDesc, srv)
}

func _BidService_GetAllBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetAllBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/GetAllBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetAllBids(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_GetBidById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetBidById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/GetBidById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetBidById(ctx, req.(*GetBidByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_GetBidWithInvoiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidWithInvoiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetBidWithInvoiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/GetBidWithInvoiceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetBidWithInvoiceById(ctx, req.(*GetBidWithInvoiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_GetBidsByInvoiceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidsByInvoiceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetBidsByInvoiceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/GetBidsByInvoiceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetBidsByInvoiceId(ctx, req.(*GetBidsByInvoiceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_GetBidsByInvestorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBidsByInvestorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetBidsByInvestorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/GetBidsByInvestorId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetBidsByInvestorId(ctx, req.(*GetBidsByInvestorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).NewBid(ctx, req.(*NewBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_GetFulfillingBids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFulfillingBidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).GetFulfillingBids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/GetFulfillingBids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).GetFulfillingBids(ctx, req.(*GetFulfillingBidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_AdjudicateBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjudicateBidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).AdjudicateBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/AdjudicateBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).AdjudicateBid(ctx, req.(*AdjudicateBidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BidService_AllRunningBidsToLost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllRunningBidsToLostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BidServiceServer).AllRunningBidsToLost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.BidService/AllRunningBidsToLost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BidServiceServer).AllRunningBidsToLost(ctx, req.(*AllRunningBidsToLostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BidService_ServiceDesc is the grpc.ServiceDesc for BidService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BidService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BidService",
	HandlerType: (*BidServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBids",
			Handler:    _BidService_GetAllBids_Handler,
		},
		{
			MethodName: "GetBidById",
			Handler:    _BidService_GetBidById_Handler,
		},
		{
			MethodName: "GetBidWithInvoiceById",
			Handler:    _BidService_GetBidWithInvoiceById_Handler,
		},
		{
			MethodName: "GetBidsByInvoiceId",
			Handler:    _BidService_GetBidsByInvoiceId_Handler,
		},
		{
			MethodName: "GetBidsByInvestorId",
			Handler:    _BidService_GetBidsByInvestorId_Handler,
		},
		{
			MethodName: "NewBid",
			Handler:    _BidService_NewBid_Handler,
		},
		{
			MethodName: "GetFulfillingBids",
			Handler:    _BidService_GetFulfillingBids_Handler,
		},
		{
			MethodName: "AdjudicateBid",
			Handler:    _BidService_AdjudicateBid_Handler,
		},
		{
			MethodName: "AllRunningBidsToLost",
			Handler:    _BidService_AllRunningBidsToLost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/arex/v1/arexApiV1.proto",
}

// InvoiceServiceClient is the client API for InvoiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvoiceServiceClient interface {
	GetAllInvoices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllInvoicesResponse, error)
	GetInvoiceById(ctx context.Context, in *GetInvoiceByIdRequest, opts ...grpc.CallOption) (*GetInvoiceByIdResponse, error)
	NewInvoice(ctx context.Context, in *NewInvoiceRequest, opts ...grpc.CallOption) (*NewInvoiceResponse, error)
}

type invoiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvoiceServiceClient(cc grpc.ClientConnInterface) InvoiceServiceClient {
	return &invoiceServiceClient{cc}
}

func (c *invoiceServiceClient) GetAllInvoices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetAllInvoicesResponse, error) {
	out := new(GetAllInvoicesResponse)
	err := c.cc.Invoke(ctx, "/v1.InvoiceService/GetAllInvoices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) GetInvoiceById(ctx context.Context, in *GetInvoiceByIdRequest, opts ...grpc.CallOption) (*GetInvoiceByIdResponse, error) {
	out := new(GetInvoiceByIdResponse)
	err := c.cc.Invoke(ctx, "/v1.InvoiceService/GetInvoiceById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invoiceServiceClient) NewInvoice(ctx context.Context, in *NewInvoiceRequest, opts ...grpc.CallOption) (*NewInvoiceResponse, error) {
	out := new(NewInvoiceResponse)
	err := c.cc.Invoke(ctx, "/v1.InvoiceService/NewInvoice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvoiceServiceServer is the server API for InvoiceService service.
// All implementations must embed UnimplementedInvoiceServiceServer
// for forward compatibility
type InvoiceServiceServer interface {
	GetAllInvoices(context.Context, *Empty) (*GetAllInvoicesResponse, error)
	GetInvoiceById(context.Context, *GetInvoiceByIdRequest) (*GetInvoiceByIdResponse, error)
	NewInvoice(context.Context, *NewInvoiceRequest) (*NewInvoiceResponse, error)
	mustEmbedUnimplementedInvoiceServiceServer()
}

// UnimplementedInvoiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInvoiceServiceServer struct {
}

func (UnimplementedInvoiceServiceServer) GetAllInvoices(context.Context, *Empty) (*GetAllInvoicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllInvoices not implemented")
}
func (UnimplementedInvoiceServiceServer) GetInvoiceById(context.Context, *GetInvoiceByIdRequest) (*GetInvoiceByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvoiceById not implemented")
}
func (UnimplementedInvoiceServiceServer) NewInvoice(context.Context, *NewInvoiceRequest) (*NewInvoiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewInvoice not implemented")
}
func (UnimplementedInvoiceServiceServer) mustEmbedUnimplementedInvoiceServiceServer() {}

// UnsafeInvoiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvoiceServiceServer will
// result in compilation errors.
type UnsafeInvoiceServiceServer interface {
	mustEmbedUnimplementedInvoiceServiceServer()
}

func RegisterInvoiceServiceServer(s grpc.ServiceRegistrar, srv InvoiceServiceServer) {
	s.RegisterService(&InvoiceService_ServiceDesc, srv)
}

func _InvoiceService_GetAllInvoices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetAllInvoices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InvoiceService/GetAllInvoices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetAllInvoices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_GetInvoiceById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvoiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).GetInvoiceById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InvoiceService/GetInvoiceById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).GetInvoiceById(ctx, req.(*GetInvoiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvoiceService_NewInvoice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewInvoiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvoiceServiceServer).NewInvoice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.InvoiceService/NewInvoice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvoiceServiceServer).NewInvoice(ctx, req.(*NewInvoiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvoiceService_ServiceDesc is the grpc.ServiceDesc for InvoiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvoiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.InvoiceService",
	HandlerType: (*InvoiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllInvoices",
			Handler:    _InvoiceService_GetAllInvoices_Handler,
		},
		{
			MethodName: "GetInvoiceById",
			Handler:    _InvoiceService_GetInvoiceById_Handler,
		},
		{
			MethodName: "NewInvoice",
			Handler:    _InvoiceService_NewInvoice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/arex/v1/arexApiV1.proto",
}
